name: Build and Release

on:
  push:
    tags:
    - '*'

jobs:
  debian-package-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache Dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: ${{ runner.temp }}/apt
          key: apt-cache

      - name: Restore Dependencies
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          sudo cp ${{ runner.temp }}/apt/*.deb /var/cache/apt/archives

      - name: Build
        run: |
          echo 'Binary::apt::APT::Keep-Downloaded-Packages "1";' | sudo tee /etc/apt/apt.conf.d/10apt-keep-downloads

          sudo apt-get install -y lsb-core

          sudo rm /etc/apt/sources.list

          codename=$(lsb_release -cs)
          mirror_url="http://azure.archive.ubuntu.com/ubuntu"
          port_mirror_url="http://azure.ports.ubuntu.com/"
          for section1 in {$codename,$codename-updates,$codename-backports,$codename-security}
          do
            echo "deb [arch=amd64,i386] $mirror_url $section1 main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list >> /dev/null
            echo "deb-src [arch=amd64,i386] $mirror_url $section1 main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list >> /dev/null        
            echo "deb [arch-=amd64,i386] $port_mirror_url $section1 main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list >> /dev/null
            echo "deb-src [arch-=amd64,i386] $port_mirror_url $section1 main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list >> /dev/null
          done

          architectures="amd64 armhf arm64 ppc64el s390x riscv64"
          for arch in $architectures
          do
            sudo dpkg --add-architecture $arch
          done

          sudo apt-get update -y

          depends="cmake ninja-build qt6-tools-dev-tools qt6-l10n-tools"
          for arch in $architectures
          do
            depends="$depends qt6-tools-dev:$arch qt6-base-dev:$arch qt6-connectivity-dev:$arch libssl-dev:$arch"
            if [ $(dpkg-architecture -q DEB_HOST_ARCH) == $arch ]; then
              depends="$depends gcc g++"
            else
              if [ $arch == amd64 ]; then
                depends="$depends gcc-x86-64-linux-gnu g++-x86-64-linux-gnu"
              elif [ $arch == armhf ]; then
                depends="$depends gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf"
              elif [ $arch == arm64 ]; then
                depends="$depends gcc-aarch64-linux-gnu g++-aarch64-linux-gnu"
              elif [ $arch == ppc64el ]; then
                depends="$depends gcc-powerpc64le-linux-gnu g++-powerpc64le-linux-gnu"
              elif [ $arch == s390x ]; then
                depends="$depends gcc-s390x-linux-gnu g++-s390x-linux-gnu"
              elif [ $arch == riscv64 ]; then
                depends="$depends gcc-riscv64-linux-gnu g++-riscv64-linux-gnu"
              fi
            fi
          done

          sudo apt-get install -y --no-install-recommends $depends

          for arch in $architectures
          do
            cmake --no-warn-unused-cli -G "Ninja" -B$(pwd)/build-$arch -S$(pwd) -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_TOOLCHAIN_FILE:STRING=$arch.cmake

            cd build-$arch
            cmake --build . --parallel
            cpack -G DEB
            mv *.deb ..
            cd ..
          done

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          fail_on_unmatched_files: true
          files: ${{ github.workspace }}/*.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Copy Packages to Cache Directory
        run: |
          if [ -e ${{ runner.temp }}/apt ]; then
            rm -rf ${{ runner.temp }}/apt
          fi
          mkdir ${{ runner.temp }}/apt
          cp /var/cache/apt/archives/*.deb ${{ runner.temp }}/apt

  windows-package-build:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache Dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: C:/vcpkg/installed
          key: vcpkg-cache
      
      - name: Build
        shell: pwsh
        run: |
          cd C:\vcpkg
          git pull

          $depends = @()
          $triplets = "arm64-windows", "x86-windows", "x64-windows"
          foreach ($triplet in $triplets) {
            $depends += "qtconnectivity:$triplet qttools:$triplet"
          }

          .\vcpkg.exe install $depends
          
          cd -

          foreach ($triplet in $triplets) {
            cmake -Bbuild-$triplet -S. -DCMAKE_BUILD_TYPE:STRING=Release -DCMAKE_TOOLCHAIN_FILE:STRING="C:\vcpkg\scripts\buildsystems\vcpkg.cmake" -DVCPKG_TARGET_TRIPLET:STRING="$triplet"
            cd build-$triplet
            cpack -G ZIP
            cpack -G 7Z
            mv *.zip ..
            mv *.7z ..            
            cd -
          }

      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          fail_on_unmatched_files: true
          files: |
            ${{ github.workspace }}/*.7z
            ${{ github.workspace }}/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}